"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./src/app/admin/actions.ts":
/*!**********************************!*\
  !*** ./src/app/admin/actions.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cancelGiftbitReward: () => (/* binding */ cancelGiftbitReward),\n/* harmony export */   getAdminDashboardData: () => (/* binding */ getAdminDashboardData),\n/* harmony export */   getAdminGiftData: () => (/* binding */ getAdminGiftData),\n/* harmony export */   getAvailableGiftbitRegionsAndBrands: () => (/* binding */ getAvailableGiftbitRegionsAndBrands),\n/* harmony export */   saveGiftbitSettings: () => (/* binding */ saveGiftbitSettings)\n/* harmony export */ });\n/* harmony import */ var private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! private-next-rsc-action-client-wrapper */ \"(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-loader/action-client-wrapper.js\");\n/* harmony import */ var private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__);\n/* __next_internal_action_entry_do_not_use__ {\"0060f2626fae36a5d8bd07ebfd3f4740f8f087f2cd\":\"getAvailableGiftbitRegionsAndBrands\",\"006a0aecd529551c1ed2d9b93f7e44949be03e83f1\":\"getAdminGiftData\",\"00fcf9e9e6af0f45e38921aaa0add6f733eb9b9555\":\"getAdminDashboardData\",\"40089f17ceaf65bc4808670c49344e3908c1f60283\":\"cancelGiftbitReward\",\"407bb6f56c7e5a4a370639c232be633c1d88a6eb1f\":\"saveGiftbitSettings\"} */ \nvar getAdminDashboardData = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"00fcf9e9e6af0f45e38921aaa0add6f733eb9b9555\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getAdminDashboardData\");\nvar getAvailableGiftbitRegionsAndBrands = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"0060f2626fae36a5d8bd07ebfd3f4740f8f087f2cd\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getAvailableGiftbitRegionsAndBrands\");\nvar saveGiftbitSettings = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"407bb6f56c7e5a4a370639c232be633c1d88a6eb1f\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"saveGiftbitSettings\");\nvar getAdminGiftData = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"006a0aecd529551c1ed2d9b93f7e44949be03e83f1\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"getAdminGiftData\");\nvar cancelGiftbitReward = /*#__PURE__*/ (0,private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.createServerReference)(\"40089f17ceaf65bc4808670c49344e3908c1f60283\", private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.callServer, void 0, private_next_rsc_action_client_wrapper__WEBPACK_IMPORTED_MODULE_0__.findSourceMapURL, \"cancelGiftbitReward\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvYWRtaW4vYWN0aW9ucy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQTRCc0JBLHNDQUFBQSw2RkFBQUEsK0NBQUFBLDhFQUFBQSxVQUFBQSxvRkFBQUE7SUFtRkFDLG9EQUFBQSw2RkFBQUEsK0NBQUFBLDhFQUFBQSxVQUFBQSxvRkFBQUE7SUFtRUFDLG9DQUFBQSw2RkFBQUEsK0NBQUFBLDhFQUFBQSxVQUFBQSxvRkFBQUE7SUFZQUMsaUNBQUFBLDZGQUFBQSwrQ0FBQUEsOEVBQUFBLFVBQUFBLG9GQUFBQTtJQXFEQUMsb0NBQUFBLDZGQUFBQSwrQ0FBQUEsOEVBQUFBLFVBQUFBLG9GQUFBQSIsInNvdXJjZXMiOlsiL2hvbWUvdXNlci9zdHVkaW8vc3JjL2FwcC9hZG1pbi9hY3Rpb25zLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlxuJ3VzZSBzZXJ2ZXInO1xuXG5pbXBvcnQgeyBhZG1pbkRiIH0gZnJvbSAnQC9saWIvZmlyZWJhc2Uvc2VydmVyJztcbmltcG9ydCB7IFVzZXJQcm9maWxlLCBPcGVuSG91c2UsIEZlZWRiYWNrRm9ybSwgQXBwU2V0dGluZ3MsIEdpZnRiaXRSZWdpb24sIEdpZnRiaXRCcmFuZCwgR2lmdGJpdFNldHRpbmdzLCBHaWZ0LCBBZG1pbkdpZnQgfSBmcm9tICdAL2xpYi90eXBlcyc7XG5cblxuZnVuY3Rpb24gc2VyaWFsaXplVGltZXN0YW1wcyhvYmo6IGFueSk6IGFueSB7XG4gICAgaWYgKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iai50b0RhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG9iai50b0RhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIHJldHVybiBvYmoubWFwKHNlcmlhbGl6ZVRpbWVzdGFtcHMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgY29uc3QgbmV3T2JqOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICAgICAgbmV3T2JqW2tleV0gPSBzZXJpYWxpemVUaW1lc3RhbXBzKG9ialtrZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3T2JqO1xuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBZG1pbkRhc2hib2FyZERhdGEoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbGV0IHVzZXJzOiBVc2VyUHJvZmlsZVtdID0gW107XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB1c2Vyc1NuYXBzaG90ID0gYXdhaXQgYWRtaW5EYi5jb2xsZWN0aW9uKCd1c2VycycpLmdldCgpO1xuICAgICAgICAgICAgdXNlcnMgPSB1c2Vyc1NuYXBzaG90LmRvY3MubWFwKGRvYyA9PiAoeyBpZDogZG9jLmlkLCAuLi5kb2MuZGF0YSgpIH0pIGFzIFVzZXJQcm9maWxlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09ICdOT1RfRk9VTkQnIHx8IChlcnJvci5kZXRhaWxzICYmIGVycm9yLmRldGFpbHMuaW5jbHVkZXMoJ05PVF9GT1VORCcpKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWRtaW4gRGFzaGJvYXJkOiAndXNlcnMnIGNvbGxlY3Rpb24gbm90IGZvdW5kLCByZXR1cm5pbmcgZW1wdHkgYXJyYXkuXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjsgLy8gUmUtdGhyb3cgb3RoZXIgZXJyb3JzXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb3BlbkhvdXNlczogT3BlbkhvdXNlW10gPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGhvdXNlc1NuYXBzaG90ID0gYXdhaXQgYWRtaW5EYi5jb2xsZWN0aW9uKCdvcGVuSG91c2VzJykuZ2V0KCk7XG4gICAgICAgICAgICBvcGVuSG91c2VzID0gaG91c2VzU25hcHNob3QuZG9jcy5tYXAoZG9jID0+ICh7IGlkOiBkb2MuaWQsIC4uLmRvYy5kYXRhKCkgfSkgYXMgT3BlbkhvdXNlKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09ICdOT1RfRk9VTkQnIHx8IChlcnJvci5kZXRhaWxzICYmIGVycm9yLmRldGFpbHMuaW5jbHVkZXMoJ05PVF9GT1VORCcpKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWRtaW4gRGFzaGJvYXJkOiAnb3BlbkhvdXNlcycgY29sbGVjdGlvbiBub3QgZm91bmQsIHJldHVybmluZyBlbXB0eSBhcnJheS5cIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGZvcm1zOiBGZWVkYmFja0Zvcm1bXSA9IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZm9ybXNTbmFwc2hvdCA9IGF3YWl0IGFkbWluRGIuY29sbGVjdGlvbignZmVlZGJhY2tGb3JtcycpLndoZXJlKCd0eXBlJywgJz09JywgJ2dsb2JhbCcpLmdldCgpO1xuICAgICAgICAgICAgZm9ybXMgPSBmb3Jtc1NuYXBzaG90LmRvY3MubWFwKGRvYyA9PiAoeyBpZDogZG9jLmlkLCAuLi5kb2MuZGF0YSgpIH0pIGFzIEZlZWRiYWNrRm9ybSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgICAgIGlmIChlcnJvci5jb2RlID09PSAnTk9UX0ZPVU5EJyB8fCAoZXJyb3IuZGV0YWlscyAmJiBlcnJvci5kZXRhaWxzLmluY2x1ZGVzKCdOT1RfRk9VTkQnKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkFkbWluIERhc2hib2FyZDogJ2ZlZWRiYWNrRm9ybXMnIGNvbGxlY3Rpb24gbm90IGZvdW5kLCByZXR1cm5pbmcgZW1wdHkgYXJyYXkuXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbGV0IHNldHRpbmdzOiBBcHBTZXR0aW5ncyA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc2V0dGluZ3NEb2MgPSBhd2FpdCBhZG1pbkRiLmNvbGxlY3Rpb24oJ3NldHRpbmdzJykuZG9jKCdhcHBEZWZhdWx0cycpLmdldCgpO1xuICAgICAgICAgICAgaWYgKHNldHRpbmdzRG9jLmV4aXN0cykge1xuICAgICAgICAgICAgICAgIHNldHRpbmdzID0gc2V0dGluZ3NEb2MuZGF0YSgpIGFzIEFwcFNldHRpbmdzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcjogYW55KSB7XG4gICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09ICdOT1RfRk9VTkQnIHx8IChlcnJvci5kZXRhaWxzICYmIGVycm9yLmRldGFpbHMuaW5jbHVkZXMoJ05PVF9GT1VORCcpKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQWRtaW4gRGFzaGJvYXJkOiAnc2V0dGluZ3MnIGNvbGxlY3Rpb24gbm90IGZvdW5kLCByZXR1cm5pbmcgZW1wdHkgb2JqZWN0LlwiKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1c2Vyczogc2VyaWFsaXplVGltZXN0YW1wcyh1c2VycyksXG4gICAgICAgICAgICBvcGVuSG91c2VzOiBzZXJpYWxpemVUaW1lc3RhbXBzKG9wZW5Ib3VzZXMpLFxuICAgICAgICAgICAgZm9ybXM6IHNlcmlhbGl6ZVRpbWVzdGFtcHMoZm9ybXMpLFxuICAgICAgICAgICAgc2V0dGluZ3M6IHNlcmlhbGl6ZVRpbWVzdGFtcHMoc2V0dGluZ3MpLFxuICAgICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdldEFkbWluRGFzaGJvYXJkRGF0YTpcIiwgZXJyb3IpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZmV0Y2ggYWRtaW4gZGFzaGJvYXJkIGRhdGE6IFwiICsgZXJyb3IubWVzc2FnZSk7XG4gICAgfVxufVxuXG5cbmNvbnN0IEdJRlRCSVRfQVBJX0tFWSA9IHByb2Nlc3MuZW52LkdJRlRCSVRfQVBJX0tFWTtcbmNvbnN0IEdJRlRCSVRfQkFTRV9VUkwgPSAnaHR0cHM6Ly9hcGktdGVzdGJlZC5naWZ0Yml0LmNvbS9wYXBpL3YxJztcblxuY29uc3QgcmVnaW9uQ3VycmVuY3lNYXA6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gICAgJ2NhJzogJ0NBRCcsXG4gICAgJ3VzJzogJ1VTRCcsXG4gICAgJ2F1JzogJ0FVRCcsXG4gICAgJ2dsb2JhbCc6ICdVU0QnXG59O1xuXG5mdW5jdGlvbiBnZXRSZWdpb25Db2RlRnJvbU5hbWUobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAobmFtZSA9PT0gXCJVU0FcIikgcmV0dXJuIFwidXNcIjtcbiAgICBpZiAobmFtZSA9PT0gXCJDYW5hZGFcIikgcmV0dXJuIFwiY2FcIjtcbiAgICBpZiAobmFtZSA9PT0gXCJBdXN0cmFsaWFcIikgcmV0dXJuIFwiYXVcIjtcbiAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpO1xufVxuXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBdmFpbGFibGVHaWZ0Yml0UmVnaW9uc0FuZEJyYW5kcygpOiBQcm9taXNlPHsgcmVnaW9uczogR2lmdGJpdFJlZ2lvbltdLCBicmFuZHM6IEdpZnRiaXRCcmFuZFtdIH0+IHtcbiAgICBpZiAoIUdJRlRCSVRfQVBJX0tFWSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dJRlRCSVRfQVBJX0tFWSBpcyBub3QgY29uZmlndXJlZCBvbiB0aGUgc2VydmVyLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IFtyZWdpb25zUmVzcG9uc2UsIGJyYW5kc1Jlc3BvbnNlXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIGZldGNoKGAke0dJRlRCSVRfQkFTRV9VUkx9L3JlZ2lvbnNgLCB7XG4gICAgICAgICAgICAgICAgaGVhZGVyczogeyAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHtHSUZUQklUX0FQSV9LRVl9YCB9LFxuICAgICAgICAgICAgICAgIG5leHQ6IHsgcmV2YWxpZGF0ZTogODY0MDAgfSAvLyBSZXZhbGlkYXRlIG9uY2UgYSBkYXlcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZmV0Y2goYCR7R0lGVEJJVF9CQVNFX1VSTH0vYnJhbmRzP2xpbWl0PTUwMGAsIHsgLy8gRmV0Y2ggYWxsIGJyYW5kc1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7R0lGVEJJVF9BUElfS0VZfWAgfSxcbiAgICAgICAgICAgICAgICBuZXh0OiB7IHJldmFsaWRhdGU6IDM2MDAgfSAvLyBSZXZhbGlkYXRlIGV2ZXJ5IGhvdXJcbiAgICAgICAgICAgIH0pXG4gICAgICAgIF0pO1xuXG4gICAgICAgIGlmICghcmVnaW9uc1Jlc3BvbnNlLm9rIHx8ICFicmFuZHNSZXNwb25zZS5vaykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignR2lmdGJpdCBBUEkgRXJyb3I6Jywge1xuICAgICAgICAgICAgICAgIHJlZ2lvbnNTdGF0dXM6IHJlZ2lvbnNSZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICAgICAgYnJhbmRzU3RhdHVzOiBicmFuZHNSZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGZldGNoIGRhdGEgZnJvbSBHaWZ0Yml0LicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmVnaW9uc0RhdGEgPSBhd2FpdCByZWdpb25zUmVzcG9uc2UuanNvbigpO1xuICAgICAgICBjb25zdCBicmFuZHNEYXRhID0gYXdhaXQgYnJhbmRzUmVzcG9uc2UuanNvbigpO1xuXG4gICAgICAgIGNvbnN0IHByb2Nlc3NlZFJlZ2lvbnMgPSAocmVnaW9uc0RhdGEucmVnaW9ucyB8fCBbXSkubWFwKChyZWdpb246IGFueSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29kZSA9IGdldFJlZ2lvbkNvZGVGcm9tTmFtZShyZWdpb24ubmFtZSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnJlZ2lvbixcbiAgICAgICAgICAgICAgICBjb2RlOiBjb2RlLFxuICAgICAgICAgICAgICAgIGN1cnJlbmN5OiByZWdpb25DdXJyZW5jeU1hcFtjb2RlXSB8fCAnVVNEJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUaGUgL2JyYW5kcyBlbmRwb2ludCBkb2VzIG5vdCBwcm92aWRlIHJlZ2lvbiBjb2Rlcywgc28gd2UgaGF2ZSB0byBhc3N1bWUgYmFzZWQgb24gY29tbW9uIGJyYW5kIHN1ZmZpeGVzXG4gICAgICAgIC8vIG9yIG90aGVyIGJ1c2luZXNzIGxvZ2ljLiBGb3IgdGhpcyBhcHAsIHdlIHdpbGwgYXNzdW1lIGEgYnJhbmQgaXMgYXZhaWxhYmxlIGluIGEgcmVnaW9uIGlmIGl0cyBicmFuZF9jb2RlXG4gICAgICAgIC8vIGVuZHMgd2l0aCB0aGUgcmVnaW9uIGNvZGUgKGUuZy4sIFwiQU1BWk9OVVNcIiBpcyBpbiBcInVzXCIpLiBUaGlzIGlzIGEgbGltaXRhdGlvbiBvZiB0aGUgQVBJIGRlc2lnbi5cbiAgICAgICAgY29uc3QgcHJvY2Vzc2VkQnJhbmRzID0gKGJyYW5kc0RhdGEuYnJhbmRzIHx8IFtdKS5tYXAoKGJyYW5kOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBvdGVudGlhbFJlZ2lvbkNvZGVzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgaWYgKGJyYW5kLmJyYW5kX2NvZGUuZW5kc1dpdGgoXCJDQVwiKSkgcG90ZW50aWFsUmVnaW9uQ29kZXMucHVzaChcImNhXCIpO1xuICAgICAgICAgICAgaWYgKGJyYW5kLmJyYW5kX2NvZGUuZW5kc1dpdGgoXCJVU1wiKSkgcG90ZW50aWFsUmVnaW9uQ29kZXMucHVzaChcInVzXCIpO1xuICAgICAgICAgICAgaWYgKGJyYW5kLmJyYW5kX2NvZGUuZW5kc1dpdGgoXCJBVVwiKSkgcG90ZW50aWFsUmVnaW9uQ29kZXMucHVzaChcImF1XCIpO1xuXG4gICAgICAgICAgICAvLyBJZiBubyBzcGVjaWZpYyByZWdpb24sIGFzc3VtZSBpdCBtaWdodCBiZSBnbG9iYWwgb3IgYXZhaWxhYmxlIGluIHByaW1hcnkgcmVnaW9uc1xuICAgICAgICAgICAgaWYgKHBvdGVudGlhbFJlZ2lvbkNvZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICBwb3RlbnRpYWxSZWdpb25Db2Rlcy5wdXNoKFwidXNcIiwgXCJjYVwiLCBcImF1XCIsIFwiZ2xvYmFsXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLmJyYW5kLFxuICAgICAgICAgICAgICAgIHJlZ2lvbl9jb2RlczogYnJhbmQucmVnaW9uX2NvZGVzIHx8IHBvdGVudGlhbFJlZ2lvbkNvZGVzXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVnaW9uczogcHJvY2Vzc2VkUmVnaW9ucyxcbiAgICAgICAgICAgIGJyYW5kczogcHJvY2Vzc2VkQnJhbmRzLFxuICAgICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgZnJvbSBHaWZ0Yml0OicsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCByZXRyaWV2ZSBHaWZ0Yml0IGRhdGEuJyk7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2F2ZUdpZnRiaXRTZXR0aW5ncyhzZXR0aW5nczogR2lmdGJpdFNldHRpbmdzKTogUHJvbWlzZTx7IHN1Y2Nlc3M6IGJvb2xlYW47IG1lc3NhZ2U/OiBzdHJpbmcgfT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHNldHRpbmdzRG9jUmVmID0gYWRtaW5EYi5jb2xsZWN0aW9uKCdzZXR0aW5ncycpLmRvYygnYXBwRGVmYXVsdHMnKTtcbiAgICAgICAgYXdhaXQgc2V0dGluZ3NEb2NSZWYuc2V0KHsgZ2lmdGJpdDogc2V0dGluZ3MgfSwgeyBtZXJnZTogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSB9O1xuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHNhdmluZyBHaWZ0Yml0IHNldHRpbmdzOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBtZXNzYWdlOiAnRmFpbGVkIHRvIHNhdmUgc2V0dGluZ3MuJyB9O1xuICAgIH1cbn1cblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QWRtaW5HaWZ0RGF0YSgpOiBQcm9taXNlPEFkbWluR2lmdFtdPiB7XG4gICAgaWYgKCFHSUZUQklUX0FQSV9LRVkpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0dJRlRCSVRfQVBJX0tFWSBpcyBub3QgY29uZmlndXJlZCBvbiB0aGUgc2VydmVyLiBTa2lwcGluZyBHaWZ0Yml0IEFQSSBjYWxsLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IFtnaWZ0c1NuYXBzaG90LCB1c2Vyc1NuYXBzaG90LCBnaWZ0Yml0UmV3YXJkc1Jlc3BvbnNlXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIGFkbWluRGIuY29sbGVjdGlvbignZ2lmdHMnKS5vcmRlckJ5KCdjcmVhdGVkQXQnLCAnZGVzYycpLmdldCgpLFxuICAgICAgICAgICAgYWRtaW5EYi5jb2xsZWN0aW9uKCd1c2VycycpLmdldCgpLFxuICAgICAgICAgICAgR0lGVEJJVF9BUElfS0VZID8gZmV0Y2goYCR7R0lGVEJJVF9CQVNFX1VSTH0vZ2lmdHM/bGltaXQ9NTAwYCwgeyAvLyBGZXRjaCBhbGwgZ2lmdHMvcmV3YXJkcyBmcm9tIGdpZnRiaXRcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke0dJRlRCSVRfQVBJX0tFWX1gIH0sXG4gICAgICAgICAgICAgICAgbmV4dDogeyByZXZhbGlkYXRlOiA2MCB9IC8vIFJldmFsaWRhdGUgZXZlcnkgbWludXRlXG4gICAgICAgICAgICB9KSA6IFByb21pc2UucmVzb2x2ZShudWxsKVxuICAgICAgICBdKTtcblxuICAgICAgICBjb25zdCB1c2Vyc01hcCA9IG5ldyBNYXAodXNlcnNTbmFwc2hvdC5kb2NzLm1hcChkb2MgPT4gW2RvYy5pZCwgZG9jLmRhdGEoKSBhcyBVc2VyUHJvZmlsZV0pKTtcbiAgICAgICAgY29uc3QgZ2lmdHNGcm9tRGIgPSBnaWZ0c1NuYXBzaG90LmRvY3MubWFwKGRvYyA9PiAoeyBpZDogZG9jLmlkLCAuLi5kb2MuZGF0YSgpIH0gYXMgR2lmdCkpO1xuICAgICAgICBcbiAgICAgICAgbGV0IGdpZnRiaXRSZXdhcmRzTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICBpZiAoZ2lmdGJpdFJld2FyZHNSZXNwb25zZSAmJiBnaWZ0Yml0UmV3YXJkc1Jlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICBjb25zdCBnaWZ0Yml0RGF0YSA9IGF3YWl0IGdpZnRiaXRSZXdhcmRzUmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgKGdpZnRiaXREYXRhLmdpZnRzIHx8IFtdKS5mb3JFYWNoKChyZXdhcmQ6IGFueSkgPT4ge1xuICAgICAgICAgICAgICAgIGdpZnRiaXRSZXdhcmRzTWFwLnNldChyZXdhcmQudXVpZCwgcmV3YXJkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKGdpZnRiaXRSZXdhcmRzUmVzcG9uc2UpIHtcbiAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdHaWZ0Yml0IEFQSSBFcnJvcjonLCB7XG4gICAgICAgICAgICAgICAgc3RhdHVzOiBnaWZ0Yml0UmV3YXJkc1Jlc3BvbnNlLnN0YXR1cyxcbiAgICAgICAgICAgICAgICBib2R5OiBhd2FpdCBnaWZ0Yml0UmV3YXJkc1Jlc3BvbnNlLnRleHQoKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBjb25zdCBjb21iaW5lZEdpZnRzID0gZ2lmdHNGcm9tRGIubWFwKGdpZnQgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2VuZGVyID0gdXNlcnNNYXAuZ2V0KGdpZnQudXNlcklkKTtcbiAgICAgICAgICAgIGNvbnN0IGdpZnRiaXRSZXdhcmQgPSBnaWZ0Yml0UmV3YXJkc01hcC5nZXQoZ2lmdC5pZCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4uZ2lmdCxcbiAgICAgICAgICAgICAgICBzZW5kZXJOYW1lOiBzZW5kZXI/Lm5hbWUgfHwgJ1Vua25vd24gVXNlcicsXG4gICAgICAgICAgICAgICAgc2VuZGVyRW1haWw6IHNlbmRlcj8uZW1haWwgfHwgJ04vQScsXG4gICAgICAgICAgICAgICAgZ2lmdGJpdFN0YXR1czogZ2lmdGJpdFJld2FyZD8uc3RhdHVzLFxuICAgICAgICAgICAgICAgIGdpZnRiaXRSZWRlZW1lZERhdGU6IGdpZnRiaXRSZXdhcmQ/LnJlZGVlbWVkX2RhdGUsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gc2VyaWFsaXplVGltZXN0YW1wcyhjb21iaW5lZEdpZnRzKSBhcyBBZG1pbkdpZnRbXTtcblxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGluIGdldEFkbWluR2lmdERhdGE6XCIsIGVycm9yKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIGFkbWluIGdpZnQgZGF0YTogXCIgKyBlcnJvci5tZXNzYWdlKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNhbmNlbEdpZnRiaXRSZXdhcmQoZ2lmdElkOiBzdHJpbmcpOiBQcm9taXNlPHsgc3VjY2VzczogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nIH0+IHtcbiAgICBpZiAoIUdJRlRCSVRfQVBJX0tFWSkge1xuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiBmYWxzZSwgbWVzc2FnZTogJ0dJRlRCSVRfQVBJX0tFWSBpcyBub3QgY29uZmlndXJlZCBvbiB0aGUgc2VydmVyLicgfTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0dJRlRCSVRfQkFTRV9VUkx9L2dpZnRzLyR7Z2lmdElkfWAsIHtcbiAgICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAgICBoZWFkZXJzOiB7ICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke0dJRlRCSVRfQVBJX0tFWX1gIH0sXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBzdGF0dXMgaW4gb3VyIEZpcmVzdG9yZSBkYXRhYmFzZVxuICAgICAgICAgICAgY29uc3QgZ2lmdFJlZiA9IGFkbWluRGIuY29sbGVjdGlvbignZ2lmdHMnKS5kb2MoZ2lmdElkKTtcbiAgICAgICAgICAgIGF3YWl0IGdpZnRSZWYudXBkYXRlKHsgc3RhdHVzOiAnQ2FuY2VsbGVkJyB9KTtcbiAgICAgICAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6ICdHaWZ0IHN1Y2Nlc3NmdWxseSBjYW5jZWxsZWQuJyB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JCb2R5ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3JCb2R5LmVycm9ycz8uWzBdPy5tZXNzYWdlIHx8ICdGYWlsZWQgdG8gY2FuY2VsIGdpZnQuJztcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0dpZnRiaXQgQ2FuY2VsIEFQSSBFcnJvcjonLCBlcnJvckJvZHkpO1xuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6IGVycm9yTWVzc2FnZSB9O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjYW5jZWxsaW5nIEdpZnRiaXQgcmV3YXJkOicsIGVycm9yKTtcbiAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkLicgfTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiZ2V0QWRtaW5EYXNoYm9hcmREYXRhIiwiZ2V0QXZhaWxhYmxlR2lmdGJpdFJlZ2lvbnNBbmRCcmFuZHMiLCJzYXZlR2lmdGJpdFNldHRpbmdzIiwiZ2V0QWRtaW5HaWZ0RGF0YSIsImNhbmNlbEdpZnRiaXRSZXdhcmQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/admin/actions.ts\n"));

/***/ })

});