
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an administrator of the app
    function isAppAdmin(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.isAdmin == true;
    }

    // Users can read/write their own profile, admins can read/write any profile
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId || isAppAdmin(request.auth.uid);
    }

    // Open Houses can be read/written by their owner, or any admin
    match /openHouses/{houseId} {
        allow read, write: if request.auth.uid == resource.data.userId || isAppAdmin(request.auth.uid);
    }
    
    // Leads can be read/written by their owner, or any admin
    match /leads/{leadId} {
        allow read, write: if request.auth.uid == resource.data.userId || isAppAdmin(request.auth.uid);
    }
    
    // Feedback submissions can be read/written by their owner, or any admin
    match /feedbackSubmissions/{submissionId} {
        allow read, write: if request.auth.uid == resource.data.userId || isAppAdmin(request.auth.uid);
    }

    // Feedback Forms:
    // Global forms can be read by anyone, but only written by admins
    // Custom forms can be read/written by their owner or any admin
    match /feedbackForms/{formId} {
        allow read: if request.auth != null;
        allow write: if (resource.data.type == 'custom' && request.auth.uid == resource.data.userId) || isAppAdmin(request.auth.uid);
    }
    
    // Gifts can be read/written by their owner, or any admin
    match /gifts/{giftId} {
        allow read, write: if request.auth.uid == resource.data.userId || isAppAdmin(request.auth.uid);
    }
    
    // Settings can only be read/written by admins
    match /settings/{settingId} {
        allow read, write: if isAppAdmin(request.auth.uid);
    }

    // Allow visitors to submit feedback without being authenticated
    match /feedbackSubmissions/{submissionId} {
      allow create: if request.auth == null;
    }
    
     // Allow visitors to be created as leads without being authenticated
    match /leads/{leadId} {
      allow create: if request.auth == null;
    }

  }
}
